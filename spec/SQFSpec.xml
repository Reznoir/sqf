<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.w3.org/XML/1998/06/schema/xmlspec.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<spec>
    <header>
        <title>Schematron Quick Fixes Specification</title>
        <w3c-designation>W3C Designation</w3c-designation>
        <w3c-doctype>Quick-fix support for XML Community Group - Draft</w3c-doctype>
        <pubdate>
            <month>April</month>
            <year>2015</year>
        </pubdate>
        <publoc>
            <loc href="http://schematron-quickfix.github.io/sqf/spec/SQFSpec.html">schematron-quickfix.github.io/sqf/spec/SQFSpec.html</loc>
        </publoc>
        <latestloc>
            <loc href="http://schematron-quickfix.github.io/sqf/spec/SQFSpec.html">schematron-quickfix.github.io/sqf/spec/SQFSpec.html</loc>
        </latestloc>
        <authlist>
            <author>
                <name>Nico Kutscherauer</name>
            </author>
            <author>
                <name>Octavian Nadolu</name>
            </author>
        </authlist>
        <copyright>
            <p>Copyright Â© 2015, published by the <loc href="http://www.w3.org/community/quickfix/">Quick-fix support for XML Community Group</loc> under the <xspecref href="http://www.w3.org/community/about/agreements/cla/">W3C Community Contributor License Agreement (CLA)</xspecref>. A human-readable <xspecref href="http://www.w3.org/community/about/agreements/cla-deed/">summary</xspecref> is available. </p>
        </copyright>
        <status>
            <p><emph>This specification was published by the <loc href="http://www.w3.org/community/quickfix/">Quick-fix support for XML Community Group</loc>. It is not a W3C Standard nor is it on the W3C Standards Track. Please note that under the <xspecref href="http://www.w3.org/community/about/agreements/cla/">W3C Community Contributor License Agreement (CLA)</xspecref> there is a limited opt-out and other conditions apply. Learn more about <loc href="http://www.w3.org/community/">W3C Community and Business Groups</loc>.</emph></p>
            <p>First Draft</p>
        </status>
        <abstract>
            <p>Schematron QuickFix is an extension of the ISO standard Schematron. With Schematron QuickFix the developer is able to define QuickFixes for the Schematron errors. The implementation should offer the user these QuickFixes for the reported Schematron errors. With just one click the user can decide which QuickFix acceptably fixes the error.</p>
        </abstract>
        <langusage>
            <language>English</language>
        </langusage>
        <revisiondesc>
            <p>Revision description</p>
        </revisiondesc>
    </header>
    <body>
        <div1>
            <head>Namespaces and prefixes</head>
            <p>This document describes the nodes which belong to different namespaces. For distinction and for unique descriptions all nodes, which do not belong to the NULL namespace, are named with a prefix. The following table assigns to each used prefix the corresponding namespace URI:</p>
            <table>
                <thead>
                    <tr>
                        <th>Prefix</th>
                        <th>Namespace URI</th>
                        <th>Corresponding standard</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>sch</td>
                        <td>http://purl.oclc.org/dsdl/schematron</td>
                        <td>ISO Schematron</td>
                    </tr>
                    <tr>
                        <td>sqf</td>
                        <td>http://www.schematron-quickfix.com/validator/process</td>
                        <td>Schematron QuickFix</td>
                    </tr>
                    <tr>
                        <td>xsl</td>
                        <td>http://www.w3.org/1999/XSL/Transform</td>
                        <td>XSLT 2.0</td>
                    </tr>
                </tbody>
            </table>
        </div1>
        <div1>
            <head>Terminology</head>
            <glist>
                <gitem>
                    <label id="sch-assertion">Schematron assertion</label>
                    <def>
                        <p>Condition which is declared by the Schematron elements <el>sch:report</el> or <el>sch:assert</el>.</p>
                        <p>A failed Schematron assertion produces a <termref def="sch-error">Schematron error</termref>. One Schematron assertion can produce multiple <termref def="sch-error">Schematron errors</termref>. </p>
                    </def>
                </gitem>
                <gitem>
                    <label id="sch-rule">Schematron rule</label>
                    <def>
                        <p>According to the Schematron element <el>sch:rule</el>. It contains one or more <termref def="sch-assertion">Schematron assertions</termref>.</p>
                        <glist>
                            <gitem id="sch-rule-context">
                                <label>Context</label>
                                <def>
                                    <p>The context of a <termref def="sch-rule">Schematron rule</termref> is defined by the attribute <att>context</att>. If a rule matches to more than one node, it has more than one context. </p>
                                </def>
                            </gitem>
                        </glist>
                    </def>
                </gitem>
                <gitem>
                    <label id="sch-error">Schematron error</label>
                    <def>
                        <p>A Schematron error occurs if a <termref def="sch-assertion">Schematron assertion</termref> failed for one context of its <termref def="sch-rule">Schematron rule</termref>.</p>
                        <glist>
                            <gitem>
                                <label id="sch-error-context">Context</label>
                                <def>
                                    <p>The context of the <termref def="sch-error">Schematron error</termref> is the node, which was matched by the Schematron rule, when the <termref def="sch-assertion">Schematron assertion</termref> failed.</p>
                                    <p>The attribute <att>subject</att> has no affect to the context of the Schematron error. Unlike to the <termref def="sch-rule-context">context of the Schematron rule</termref>, the Schematron error has only one context node.</p>
                                </def>
                            </gitem>
                        </glist>
                    </def>
                </gitem>

            </glist>
        </div1>
        <div1>
            <head>Introduction</head>
            <p>This section describes the classification of the based concepts of Schematron QuickFix.</p>
            <div2>
                <head>Fix</head>
                <p>A fix is a change of a document, applied to an occurred error. All changes must have the object to solve this error. Requirement is to detect the error first.</p>
            </div2>
            <div2 id="quick-fix-concept">
                <head>Quick fix</head>
                <p>A Quick fix is a fully automatic implemented fix. In connection with an error (produced by a validation of a document) one ore more Quick fixes are offered to execute. A user can choose the Quick fix, which is executed by a fully automated process. </p>
                <p>A Quick fix requires: </p>
                <olist>
                    <item>
                        <p>Instructions, written in a document processing language, to implement the fix. The instructions have to designed in a way, that it is able to process them applied to a context. The context is defined by the occurred error.</p>
                    </item>
                    <item>
                        <p>A human-readable description of the Quick fix. The description should be displayed to the user, when he chooses the Quick fix.</p>
                    </item>
                </olist>
                <p>It is able to define Quick fixes inside of a validation parser or using a therefore designed script language. First, there is a limited quantity of Quick fixes, in the second case the quantity is unlimited.</p>
                <p>It depends on the quantity of unique kinds of errors from the validation language, which way makes more sense. Is the quantity of kinds of errors limited, an implementation of Quick fixes inside of the parser is possible.</p>
                <p>Basic requirements for an implementation of a Quick fix workflow:</p>
                <ulist>
                    <item>
                        <p>Definition of Quick fixes (embedding into a parser or into a validation language).</p>
                    </item>
                    <item>
                        <p>A workflow to execute the Quick fixes.</p>
                    </item>
                    <item>
                        <p>Graphical user interface to choose the Quick fixes.</p>
                    </item>
                </ulist>
            </div2>
        </div1>
        <div1>
            <head>Workflow</head>
            <p>Schematron QuickFix (SQF) is an extension of the validation language Schematron to embed Quick fixes. To overview the Schematron QuickFix concept, this section describes the integration of SQF into the Schematron workflow.</p>
            <note>
                <p>Please note the different spelling of <emph>QuickFix</emph> and <emph>Quick fix</emph>. The spelling QuickFix means a Quick fix of the extension language Schematron QuickFix. The spelling Quick fix means a nonspecific Quick fix, which was described in the section <titleref href="#quick-fix-concept">Quick fix</titleref>.</p>
            </note>
            <p>The following figure shows the SQF workflow in eight steps:</p>
            <?oxy_comment_start author="octavian_nadolu" timestamp="20151014T095936+0300" comment="I think the workflow process should be more generic. 
The step 3 it is not necessary to be a SVRL report."?>
            <graphic source="img/workflow.png" alt="Workflow diagram with eight numbered steps that correspond to the eight sections in this chapter." />
            <?oxy_comment_end?>
            <p>The following sections describes each step of the workflow diagram and its difference to the conventional Schematron workflow.</p>
            <div2>
                <head>Schematron validation</head>
                <p>The workflow starts with a classic Schematron validation process. There are no changes needed for Schematron QuickFix, but a preferred way to implement the QuickFixes is, to compile them during the basic Schematron validation. </p>
                <p>For this specification, the following terms will be used to describe the documents, which are subject of this step:</p>
                <glist>
                    <gitem>
                        <label id="sch-document">Source document</label>
                        <def>
                            <p>The document, which is validated. If there are multiple documents, which are connected by using XInclude, these documents will be considered as one document. If there are multiple documents, which will be validated to one Schematron schema (for instance during a validation of documents of a folder), this validations will be considered as multiple separated validations.</p>
                        </def>
                    </gitem>
                    <gitem>
                        <label>Schematron schema</label>
                        <def>
                            <p>The <termref def="sch-document">source document</termref> will be validated against the Schematron schema. If there are multiple schematron documents, which are connected by include techniques of Schematron, these documents will be considered as one document. If there are multiple schematron schemas are associated with the <termref def="sch-document">source document</termref> (for instance by more than one <code>xml-model</code> processing instructions), the validations by each schema will be considered as multiple separated validations.</p>
                        </def>
                    </gitem>
                </glist>
            </div2>
            <div2>
                <head>Validation result check</head>
                <p>The second step is the validation result check. If the validation result is true, the <termref def="sch-document">source document</termref> is valid and the next step is <titleref href="#step8">step 8</titleref>. If the validation result is false, there are errors detected.</p>
                <p>In this step, there is no changes for Schematron QuickFix necessary.</p>
            </div2>
            <div2>
                <head>Error report</head>
                <p>The error report should be generated by the Schematron validation. <?oxy_comment_start author="octavian_nadolu" timestamp="20151014T100125+0300" comment="The report is not necessary a SVRL report, should be a generic error report."?>It should be a valid SVRL document (Schematron Validation Report Language). <?oxy_comment_end?></p>
                <p>In this step, changes for Schematron QuickFix are not needed, but it is a possible way, to implement Schematron QuickFix, by extending the SVRL structure, so the report is able to contain the compiled QuickFixes.</p>
            </div2>
            <div2>
                <head>Show the errors in the source document</head>
                <p>The last step of the classic Schematron validation workflow is, to display the detected errors, by using the error message in connection with the <termref def="sch-error-context">context of the Schematron error</termref>.</p>
                <p>A required change for Schematron QuickFix is, to display the available QuickFixes for those errors, in relation to the Schematron error.</p>
            </div2>
            <div2>
                <head>Decision of the user</head>
                <p>The Schematron QuickFix user should have an interactive option to select one or more QuickFixes to execute it. This is a new step for Schematron QuickFix only.</p>
            </div2>
            <div2 id="workflow_fix_process">
                <head>Executing a Quick fix</head>
                <p>Depending on the decision of the user, the selected QuickFix(es) will be executed. Normally the <termref def="sch-document">source document</termref> will be the source of this fix process and will be replaced by the result of this process. But the implementation could support QuickFixes for external documents (<titleref href="#example_external_doc">See example in Appendix</titleref>). In this cases each external document will be the source of a separate fix process and replaced by the result.</p>
                <p>This is also a new step for Schematron QuickFix only.</p>
            </div2>
            <div2>
                <head>Validation after the fix</head>
                <p>After each execution of a QuickFix, a new validation of the changed document is necessary to update the error report or to get a positive validation result. This is equal to a new Schematron validation in a classic Schematron workflow, which is necessary if there are any changes on the source document.</p>
            </div2>
            <div2 id="step8">
                <head>Fixed document</head>
                <p>The fixed document, which does not contains any errors any more is the target of each Schematron validation. There is no changes for Schematron QuickFix.</p>
            </div2>
        </div1>
        <div1>
            <head>Language</head>
            <p>This section describes the meanings of the Schematron QuickFix syntax.</p>
            <div2>
                <head>Embedding into Schematron</head>
                <p>To embed Schematron QuickFix into Schematron, all extending elements should have the namespace <code>http://www.schematron-quickfix.com/validator/process</code> (preferred prefix <code>sqf</code>).</p>
                <p>The following table shows the permitted parent-child relations between the namespaces of SQF and Schematron.</p>
                <table border="1" cellspacing="0" cellpadding="10">
                    <thead>
                        <tr>
                            <th>Parent element</th>
                            <th>Permitted children</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><el>sch:schema</el></td>
                            <td>
                                <ulist>
                                    <item>
                                        <p><el>sqf:fixes</el></p>
                                    </item>
                                </ulist>
                            </td>
                        </tr>
                        <tr>
                            <td><el>sch:rule</el></td>
                            <td>
                                <ulist>
                                    <item>
                                        <p><el>sqf:fix</el></p>
                                    </item>
                                    <item>
                                        <p><el>sqf:group</el></p>
                                    </item>
                                </ulist>
                            </td>
                        </tr>
                        <tr>
                            <td><el>sqf:title</el>
                            </td>
                            <td>
                                <ulist>
                                    <item>
                                        <p><el>sch:name</el></p>
                                    </item>
                                    <item>
                                        <p><el>sch:value-of</el></p>
                                    </item>
                                </ulist>
                            </td>
                        </tr>
                        <tr>
                            <td><el>sqf:p</el></td>
                            <td>
                                <ulist>
                                    <item>
                                        <p><el>sch:name</el></p>
                                    </item>
                                    <item>
                                        <p><el>sch:value-of</el></p>
                                    </item>
                                    <item>
                                        <p><el>sch:emph</el></p>
                                    </item>
                                    <item>
                                        <p><el>sch:dir</el></p>
                                    </item>
                                    <item>
                                        <p><el>sch:span</el></p>
                                    </item>
                                </ulist>
                            </td>
                        </tr>
                        <tr>
                            <td><el>sqf:fix</el></td>
                            <td>
                                <ulist>
                                    <item>
                                        <p><el>sch:let</el></p>
                                    </item>
                                </ulist>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <p>The following table shows which attributes from the SQF namespace should be permitted of which Schematron elements:</p>
                <table border="1" cellspacing="0" cellpadding="10">
                    <thead>
                        <tr>
                            <th>Schematron element</th>
                            <th>Permitted SQF attribute</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><el>sqf:assert</el></td>
                            <td>
                                <ulist>
                                    <item>
                                        <p><att>sqf:fix</att></p>
                                    </item>
                                    <item>
                                        <p><att>sqf:default-fix</att></p>
                                    </item>
                                </ulist>
                            </td>
                        </tr>
                        <tr>
                            <td><el>sqf:report</el></td>
                            <td>
                                <ulist>
                                    <item>
                                        <p><att>sqf:fix</att></p>
                                    </item>
                                    <item>
                                        <p><att>sqf:default-fix</att></p>
                                    </item>
                                </ulist>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div2>
            <div2>
                <head>QuickFix</head>
                <p>A QuickFix requires the following properties:</p>
                <ulist>
                    <item>
                        <p>Title</p>
                    </item>
                    <item>
                        <p>ID</p>
                    </item>
                    <item>
                        <p>One or more change commands (see <titleref href="#change-commands">Change commands</titleref>)</p>
                    </item>
                </ulist>
                <p>A QuickFix is able to have the following additional properties:</p>
                <ulist>
                    <item>
                        <p>Additional description</p>
                    </item>
                    <item>
                        <p>Condition to provide the QuickFix</p>
                    </item>
                    <item>
                        <p>Loop to make the QuickFix generic (see <titleref href="#generic-fixes">Generic QuickFix</titleref>)</p>
                    </item>
                    <item>
                        <p>User Entry to parametrise the QuickFix (see <titleref href="#user-entry">User Entries</titleref>)</p>
                    </item>
                </ulist>
                <div3>
                    <head>Definition of a QuickFix</head>
                    <p>The QuickFix is defined by the <el>sqf:fix</el> element. The requirements will be satisfied with the following base structure:</p>
                    <p><example>
                            <eg xml:space="preserve">&lt;sqf:fix id="fix1">
    &lt;sqf:description>
        &lt;sqf:title>Fix 1&lt;/sqf:title>
    &lt;/sqf:description>
    [Elements from the content model  (sqf:delete | sqf:add | sqf:replace | sqf:stringReplace)+]
&lt;/sqf:fix></eg>
                        </example></p>
                    <p>The defined QuickFix above has the following properties:</p>
                    <p>
                        <ulist>
                            <item>
                                <p>Title: Fix 1</p>
                            </item>
                            <item>
                                <p>ID: fix1</p>
                            </item>
                            <item>
                                <p>One or more change commands: not specified yet.</p>
                            </item>
                        </ulist>
                    </p>
                </div3>
                <div3>
                    <head>QuickFixes ID</head>
                    <p>The ID of the QuickFix and the QuickFix groups (see below) is the Identifier for references to QuickFixes and QuickFix groups.</p>
                    <p>Requirements to set the ID:<ulist>
                            <item>
                                <p>The ID has to correspond with the XSD type xs:NCName.</p>
                            </item>
                            <item>
                                <p>Inside of a <termref def="sch-rule">Schematron rule</termref> the ID must be unique.</p>
                            </item>
                            <item>
                                <p>Global QuickFixes or QuickFix groups should not have the same IDs.</p>
                            </item>
                        </ulist></p>
                    <p>In the following cases it is permitted that two QuickFixes, QuickFix groups or a QuickFix and a QuickFix group have the same IDs:<ulist>
                            <item>
                                <p><?oxy_comment_start author="octavian_nadolu" timestamp="20151015T122111+0300" comment="Maybe we need to specify which fix is used in this case."?>One is global the other is local.<?oxy_comment_end?></p>
                            </item>
                            <item>
                                <p>Both are local, but declared in different <termref def="sch-rule">Schematron rules</termref>.</p>
                            </item>
                        </ulist></p>
                </div3>
                <div3>
                    <head>Reference to a QuickFix</head>
                    <p><termref def="sch-assertion">Schematron assertions</termref> are able to refer to one or more QuickFixes. Therefore the <att>sqf:fix</att> attribute contains a whitespace separated list of IDs. Each ID refers to an ID of a QuickFix or QuickFix group.</p>
                    <example>
                        <p>The <el>sch:assert</el> element refers to the QuickFixes with the ID <attval>fix1</attval> and <attval>fix2</attval>:</p>
                        <eg xml:space="preserve">&lt;sch:assert test="[...]" sqf:fix="fix1 fix2">[...]&lt;/sch:assert>
&lt;sqf:fix id="fix1"> 
    [...] 
&lt;/sqf:fix> 
&lt;sqf:fix id="fix2">
    [...] 
&lt;/sqf:fix></eg>
                    </example>
                    <p>Is a <termref def="sch-assertion">Schematron assertion</termref> producing a <termref def="sch-error">Schematron error</termref> that refers to a QuickFix, a Schematron QuickFix implementation needs to provide the QuickFix as a choice for the user in connection to the occurred error.</p>
                    <p><emph>Exceptions:</emph>
                    </p>
                    <ulist>
                        <item>
                            <p>A QuickFix, which condition was not satisfied in the <termref def="sch-error-context">context of the Schematron error</termref>, should not be provided.</p>
                        </item>
                        <item>
                            <p>A <titleref href="#generic-fixes">generic QuickFix</titleref> could be not provided in some cases (see <titleref href="#generic-fixes">Generic QuickFix section</titleref>)</p>
                        </item>
                        <item>
                            <p>It is up to the implementation to provide QuickFixes which has no change commands or uses elements which are not supported by the implementation.</p>
                        </item>
                    </ulist>
                    <p>The user should be able to execute each provided QuickFix.</p>
                    <div4>
                        <head>Default fix</head>
                        <p>Tbd.</p>
                    </div4>
                </div3>
                <div3>
                    <head>Execution of a QuickFix</head>
                    <p>During the execution process of a QuickFix each <titleref href="#change-commands">command changes</titleref> will be executed in the <termref def="sch-error-context">context node of the error</termref>, if their condition was satisfied in this context.</p>
                    <div4>
                        <head>Execution of more than one QuickFix</head>
                        <p>It is free to the implementation to allow executions of more than one QuickFix at once. But an execution of more than one QuickFix of the same Schematron error at once are not permitted.</p>
                        <p>It is up to the implementation to warn the user against <titleref href="#conflicts">possible conflicts</titleref> or to hide QuickFixes to avoid such conflicts.</p>
                    </div4>
                </div3>
                <div3>
                    <head>QuickFix group</head>
                    <p>A QuickFix group is a set of one or more QuickFixes. Additional it needs an ID, <?oxy_comment_start author="octavian_nadolu" timestamp="20151015T122815+0300" comment="From here I undestand that the QuickFix goup ID is equal with one of the children QuickFix ID&apos;s. Maybe we need to rephase this: &quot;which is similar with a QuickFix ID&quot;"?>which is equal to the ID of a QuickFix<?oxy_comment_end?>. The QuickFix will be implemented with the <el>sqf:group</el> element.</p>
                    <p>A <termref def="sch-assertion">Schematron assertion</termref> is able to refer to a QuickFix group on the same way it refers to a QuickFix. A reference to a QuickFix groups is equal to references to all QuickFixes which the QuickFix group contains. </p>
                    <p><example>
                            <p>The QuickFix group has the ID groupid and contains the QuickFixes with the IDs fix1 and fix2.</p>
                            <p>The first <el>sch:assert</el> element refers to the QuickFixes fix1 and fix2 per QuickFix ID. The second one refers to the same QuickFixes per ID of the QuickFix group.</p>
                            <eg xml:space="preserve">&lt;sch:assert test="[...]" sqf:fix="fix1 fix2">[...]&lt;/sch:assert>
&lt;sch:assert test="[...]" sqf:fix="groupid">[...]&lt;/sch:assert>
&lt;sqf:group id="groupid">
     &lt;sqf:fix id="fix1"> [...] &lt;/sqf:fix>
     &lt;sqf:fix id="fix2"> [...] &lt;/sqf:fix>
&lt;/sqf:group></eg>
                        </example></p>
                    <p>For more information see the <titleref href="#sqf_group">sqf:group</titleref> definition in the SQF reference.</p>
                </div3>
                <div3 id="generic-fixes">
                    <head>Generic QuickFix</head>
                    <p>A generic QuickFix is different from a regular QuickFix in that it is defined for an unbounded count of provided QuickFixes. The count of provided QuickFixes could <?oxy_comment_start author="octavian_nadolu" timestamp="20151015T123155+0300" comment="depend"?>be depending<?oxy_comment_end?> on the <termref def="sch-error-context">context of the Schematron error</termref>.</p>
                    <p>To create a generic QuickFix, the <el>sqf:fix</el> element gets a <att>use-for-each</att> attribute. The use-for-each attribute expects an XPath expression. For each returned value or item of the XPath expression a QuickFix should provided to the user. The XPath expression will be evaluated in the <termref def="sch-error-context">context of the Schematron error</termref>. </p>
                    <p>The XPath expression of the<?oxy_comment_start author="octavian_nadolu" timestamp="20151015T140641+0300" comment="We should update also the XML Schema."?>
                        <att>use-for-each</att><?oxy_comment_end?> attribute does not change the context of the generic QuickFix. To access to the currently returned item/value, a build-in XPath variable <code>$sqf:current</code> (in the SQF namespace) should be provided. The <code>sqf:current</code> variable should be available in each XPath expression inside of the <el>sqf:fix</el> element.</p>
                    <p><example>
                            <p>Example:</p>
                            <eg xml:space="preserve">&lt;sqf:fix id="generic-fix" use-for-each="//*[@id]">
      &lt;sqf:description>
          &lt;sqf:title>Delete element &lt;value-of select="$sqf:current/@id"/>&lt;/sqf:title>
     &lt;/sqf:description>
     &lt;sqf:delete match="$sqf:current"/>
&lt;/sqf:fix></eg>
                            <p>For each element in the document which has an <att>id</att> attribute the implementation should provide one QuickFix. The title of those QuickFixes should be the fix string "Delete element " concatenated with the value of the corresponding <att>id</att> attribute. The change command will be, to delete the corresponding element.</p>
                        </example></p>

                    <div4>
                        <head>Maximum number of provided QuickFixes</head>
                        <p>Please note, that it will be easy to create a high number of QuickFixes for each Schematron error using this structure. To handle this, an implementation is free to set a limit of allowed providing QuickFixes for generic QuickFixes. If a generic QuickFix violates this limit, the implementation is free to do not provide any QuickFixes or to occurs an error. </p>
                    </div4>
                </div3>
                <div3>
                    <head>Scope of QuickFixes and QuickFix groups</head>
                    <p>A QuickFix or a QuickFix group can be defined global or local. Local QuickFixes or QuickFix groups are declared inside of the <termref def="sch-rule">Schematron rule</termref> and only the <termref def="sch-assertion">assertions</termref> of this rule are able to refer to the QuickFixes or QuickFix groups. Global QuickFixes or QuickFix groups are declared inside of the <el>sqf:fixes</el> element and available for all <termref def="sch-assertion">Schematron assertions</termref>.</p>
                    <example>
                        <p>Example for a global QuickFix:</p>
                        <eg xml:space="preserve">&lt;sch:schema> 
     [...] 
     &lt;sqf:fixes>
          &lt;sqf:fix id="fix2"> [...] &lt;/sqf:fix>
     &lt;/sqf:fixes>
&lt;/sch:schema></eg>
                    </example>
                    <example>
                        <p>Example for a local QuickFix:</p>
                        <eg xml:space="preserve">&lt;sch:rule context="[...]">
     [...] 
     &lt;sqf:fix id="fix1"> [...] &lt;/sqf:fix>
&lt;/sch:rule></eg>
                    </example>
                </div3>
                <div3>
                    <head>Role</head>
                    <p>Tbd.</p>
                </div3>
            </div2>
            <div2 id="change-commands">
                <head>Change commands</head>
                <p>A QuickFix needs at least one change command. A change command is implemented by an activity element (see element group <titleref href="#sqf_activityElements"><phrase><code>sqf:activityElements</code></phrase></titleref>). A change command is processed relative to an <titleref href="#change-command-anchor-node">anchor node</titleref>.</p>
                <div3 id="change-command-anchor-node">
                    <head>Anchor node</head>
                    <p>The anchor node is the context of a change command. By default the <termref def="sch-error-context">context of the Schematron error</termref> is the anchor node.</p>
                    <p>To specify anchor nodes, the <att>match</att> attribute is provided to each activity element. If an activity element points to more than one anchor node, for each anchor node the change command will be executed. If an activity element points to no anchor node, no change command will be executed.</p>
                    <p>The <att>match</att> attribute expects an XPath expression. The context of relative expressions is the context of the Schematron error. It is recommended to allow expressions which can use the full functionality of XPath 2.0 (or newer) and additionally the XSLT 2.0 functions.</p>
                    <div4 id="anchor_node_restrictions">
                        <head>Requirements of the Anchor node / match attribute</head>
                        <p>The only restriction to the XPath expression of the match attribute, is that the type of the return value needs to be <code>node()*</code>. Any return values which does not match to this type should occurs an error.</p>
                        <p>An implementation is free to set further restrictions to the XPath expressions. If a Change command violates this restrictions, the implementation is free to occurs an error, to hide the corresponding QuickFixes or to do not execute those Change commands, but any other of the corresponding QuickFix.</p>
                        <note>
                            <p>Please note, that supporting any XPath 2.0/XSLT 2.0 functionality could have affects to the workflow: If one of the returned nodes changes the document context, the <titleref href="#workflow_fix_process">fix process</titleref> should respect this.</p>
                        </note>
                    </div4>
                </div3>
                <div3>
                    <head>Conditions</head>
                    <p>Each change command can have a condition to execute. Therefore the attribute <att>use-when</att> is provided to each activity element. The condition will be defined in the <termref def="sch-error-context">context of the Schematron errors</termref>. If the condition is not satisfied the change command should not be executed.</p>
                </div3>
                <div3 id="fix_create_new_content">
                    <head>Create new content</head>
                    <p>Depending of the <titleref href="#change-command-kind">kind</titleref>, the change command may create new content to insert it into or replace nodes from the <termref def="sch-document">source document</termref>. There are three ways to create new content:</p>
                    <div4 id="create-by-sqf-att">
                        <head>By the attributes <att>node-type</att> and <att>target</att></head>
                        <p>To create a new node, the change command may provide the attributes <att>node-type</att> and <att>target</att>. This attributes create exact one node.</p>
                        <p>To create a new node the attribute <att>node-type</att> provides the following values:<ulist>
                                <item>
                                    <p><attval>keep</attval></p>
                                    <p>To create a node from the same type as the anchor node.</p>
                                </item>
                                <item>
                                    <p><attval>element</attval></p>
                                    <p>To create an element.</p>
                                </item>
                                <item>
                                    <p><attval>attribute</attval></p>
                                    <p>To create an attribute</p>
                                </item>
                                <item>
                                    <p><attval>processing-instruction</attval> or <attval>pi</attval></p>
                                    <p>To create a processing instruction</p>
                                </item>
                                <item>
                                    <p><attval>comment</attval></p>
                                    <p>To create a comment</p>
                                </item>
                            </ulist></p>
                        <p>Bellow a list of restrictions to use the node-type and target attribute:<ulist>
                                <item>
                                    <p>If the <att>node-type</att> attribute has not the value <attval>comment</attval>, the attribute <att>target</att> is required. It sets the name of the created node. The value of the <att>target</att> attribute will be interpreted as an <titleref href="#attribute-value-template">attribute value template</titleref>. The effective value should be valid to the XSD type xs:QName.</p>
                                </item>
                                <item>
                                    <p>If an Activity Element has a target attribute, the <att>node-type</att> attribute is required.</p>
                                </item>
                            </ulist></p>
                        <p>To create the value or content of the new node, you need to respect the following terms:<ulist>
                                <item>
                                    <p>If the <att>node-type</att> attribute has the value <attval>element</attval> (or <attval>keep</attval> and the anchor element is an element), the content of the new element will be created <titleref href="#create-by-xpath">by XPath</titleref> or <titleref href="#create-by-content">by the content of the Activity Element</titleref>.</p>
                                </item>
                                <item>
                                    <p>If the <att>node-type</att> attribute has the values <attval>attribute</attval>, <attval>processing-instruction</attval>, <attval>pi</attval> or <attval>comment</attval> (or <attval>keep</attval> and the anchor node is not an element), the value of the new node will be created <titleref href="#create-by-xpath">by XPath</titleref> or <titleref href="#create-by-content">by the content of the Activity Element</titleref>. If this returns nodes, the value will be created by the values of this nodes. More than one node value will be joined to one node value separated by whitespace.</p>
                                </item>
                            </ulist></p>
                    </div4>
                    <div4 id="create-by-xpath">
                        <head>By an XPath expression</head>
                        <p>To define the new content by an XPath expression, the <att>select</att> attribute is provided. The select attribute can be combined with the attributes node-type and target. In this case the XPath expression of the select attribute detects the content or value of the new node. Otherwise the XPath expression creates new content in the following way:</p>
                        <ulist>
                            <item>
                                <p>If the XPath expression returns an atomic value, the value will be transformed into an text node.</p>
                            </item>
                            <item>
                                <p>If the XPath expression returns a sequence of atomic values, all values will be transformed to a text node. The values will be separated by whitespace.</p>
                            </item>
                            <item>
                                <p>If the XPath expression returns one or more nodes, the nodes will be copied into the <termref def="sch-document">source document</termref>. The implementation is free to do a full copy of the returned nodes or to respect change commands caused by other (or the same) executed QuickFixes. (<titleref href="#example_apply_fixes">See example in Appendix</titleref>)</p>
                            </item>
                        </ulist>
                        <p>If the Activity Element has a <att>select</att> attribute, the element content should be empty.</p>
                    </div4>
                    <div4 id="create-by-content">
                        <head>By the Activity Element content</head>
                        <p>The content of the Activity Elements has the same functionality as the content of <el>xsl:template</el> elements from the <titleref href="http://www.w3.org/TR/xslt20">XSLT 2.0 Recommendation</titleref>. This means:</p>
                        <ulist>
                            <item>
                                <p>Elements from the XSLT namespace will be processed in the context of the change command. If XSLT elements are able to change the context in XSLT, this should have the same effect to there descendents in SQF.</p>
                            </item>
                            <item>
                                <p>Elements which not belong to the XSLT, SQF or Schematron namespace will be processed as <titleref href="http://www.w3.org/TR/xslt20/#dt-literal-result-element">Literal Result Elements</titleref>.</p>
                            </item>
                        </ulist>
                        <p>Extensions of the XSLT template behavior:</p>
                        <ulist>
                            <item>
                                <p>Elements from the SQF namespace will be processed as it is defined in this specification. Permitted element is:<ulist>
                                        <item>
                                            <p><el>sqf:keep</el></p>
                                        </item>
                                    </ulist></p>
                            </item>
                            <item>
                                <p>Elements from the Schematron namespace will be processed as it is defined in the Schematron specification. Permitted elements are:<ulist>
                                        <item>
                                            <p><el>sch:let</el></p>
                                        </item>
                                        <item>
                                            <p><el>sch:value-of</el></p>
                                        </item>
                                        <item>
                                            <p><el>sch:name</el></p>
                                        </item>
                                    </ulist></p>
                            </item>
                        </ulist>
                    </div4>
                    <div4 id="create-by-sqf_keep">
                        <head>Special case: sqf:keep element</head>
                        <p>tbd.</p>
                    </div4>
                </div3>
                <div3 id="conflicts">
                    <head>Conflicts</head>
                    <p>A conflict is thrown, if there are more than one change command for the same anchor node, during an QuickFix execution. There are two kinds of conflicts:<ulist>
                            <item>
                                <p>Resolvable conflict</p>
                                <p>If the conflict is between two or more change commands which belongs to the same QuickFix, the conflict is resolvable. In this case, the change command will be executed, whose activity element is defined at first inside of the <el>sqf:fix</el> element.</p>
                            </item>
                            <item>
                                <p>Warning raised conflict</p>
                                <p>If two or more change commands from different QuickFixes are in conflict, the conflict is not resolvable. A warning should be produced. The implementation is free to decide which QuickFix has higher priority. This kind of a conflict is just possible, if an implementation allows to execute more than one QuickFix at once.</p>
                            </item>
                        </ulist></p>
                </div3>
                <div3>
                    <head id="change-command-kind">Kind of the change commands</head>
                    <p>There are four predefined kinds of change commands:<ulist>
                            <item>
                                <p>Add</p>
                            </item>
                            <item>
                                <p>Delete</p>
                            </item>
                            <item>
                                <p>Replace</p>
                            </item>
                            <item>
                                <p>StringReplace</p>
                            </item>
                        </ulist></p>
                    <p>A Schematron QuickFix implementation is free to provide extending Change commands. The extending change commands should provide the attributes of the attribute group <titleref href="#sqf_activityBase"><phrase><code>activityBase</code></phrase></titleref> and respect the concepts to <titleref href="#fix_create_new_content">create new content</titleref>.</p>
                    <div4>
                        <head>Add</head>
                        <p>Creates one or more nodes and insert it relative to the anchor node as new content. The new content could be created by the <titleref href="#create-by-sqf-att">SQF attributes</titleref>, <titleref href="#create-by-xpath">by XPath</titleref> or <titleref href="#create-by-content">by the content of the sqf:add element</titleref>.</p>
                        <p>The position attribute detects the position relative to the anchor node, where the new content should be inserted. The following values are available:</p>
                        <p><glist>
                                <gitem>
                                    <label>first-child</label>
                                    <def>
                                        <p>If the anchor node is an element the new content will be inserted after the start tag of the anchor node.</p>
                                        <p>If the anchor node is an attribute, the new content will be inserted after the start tag of the parent element of the anchor node.</p>
                                        <p>Otherwise: the new content will be inserted after the anchor node.</p>
                                        <p>This value is the default value of the <att>position</att> attribute.</p>
                                    </def>
                                </gitem>
                                <gitem>
                                    <label>last-child</label>
                                    <def>
                                        <p>If the anchor node is an element the new content will be inserted before the end tag of the anchor node.</p>
                                        <p>If the anchor node is an attribute, the new content will be inserted before the end tag of the parent element of the anchor node.</p>
                                        <p>Otherwise: the new content will be inserted after the anchor node.</p>
                                    </def>
                                </gitem>
                                <gitem>
                                    <label>before</label>
                                    <def>
                                        <p>The new content will be inserted before the anchor node.</p>
                                        <p>If the anchor node is an attribute, the new content will be inserted before the parent element of the anchor node.</p>
                                    </def>
                                </gitem>
                                <gitem>
                                    <label>after</label>
                                    <def>
                                        <p>The new content will be inserted after the anchor node.</p>
                                        <p>If the anchor node is an attribute, the new content will be inserted after the parent element of the anchor node.</p>
                                    </def>
                                </gitem>
                            </glist></p>
                        <p>The <att>position</att> attribute is useless, if the new content are one or more attributes. In this case, the new content should always be added as attribute(s) of the anchor node.</p>
                        <p>In the case, the new content is an attribute, it is an error if the anchor node is not an element. If the anchor node is an element and has an attribute with the same name as one of the new attributes, the new attributes should replace the existing attributes.</p>
                    </div4>
                    <div4>
                        <head>Delete</head>
                        <p>This change command deletes the anchor node.</p>
                    </div4>
                    <div4>
                        <head>Replace</head>
                        <p>The anchor node will be replaced by new content. The new content can be created by the <titleref href="#create-by-sqf-att">SQF attributes</titleref>, <titleref href="#create-by-xpath">by XPath</titleref> or <titleref href="#create-by-content">by the content of the sqf:replace element</titleref>.</p>
                        <p>It is an error, if the new content is an attribute, but the anchor node not.</p>
                    </div4>
                    <div4>
                        <head>StringReplace</head>
                        <p>The anchor node has to be a text node. To analyze the text node, the <att>regex</att> attribute is required. The attribute value of the regex attribute will be interpreted as an <titleref href="http://www.w3.org/TR/xslt20/#attribute-value-templates">attribute value template</titleref>. The effective value should be a valid <titleref href="http://www.w3.org/TR/xslt20/#regular-expressions">Regular Expression</titleref> corresponding to the XSLT 2.0 Recommendation.</p>
                        <p>Any substrings, which matches to this Regular Expression, will be replaced by new content. The new content can be created <titleref href="#create-by-xpath">by XPath</titleref> or <titleref href="#create-by-content">by the content of the sqf:stringReplace element</titleref>.</p>
                    </div4>
                </div3>
            </div2>
            <div2>
                <head>Variables</head>
                <div3>
                    <head>Declaration</head>
                    <p>The Schematron QuickFix specification does not provide an own structure to declare variables for the XPath expressions. There are two permitted ways do declare variables:</p>
                    <ulist>
                        <item>
                            <p>Using Schematron variables (<el>sch:let</el>).</p>
                        </item>
                        <item>
                            <p>Using XSLT variables (<el>xsl:variable</el>).</p>
                        </item>
                    </ulist>
                    <p>There is no difference between this ways, though the XSLT variables provides more functionality (as attribute, value by content). There should be no change of the original functionality by using these variable structures for Schematron QuickFix.</p>
                    <div4>
                        <head>Places to declare variables</head>
                        <p>There are two places (inside of the SQF elements) to declare variables:</p><p><ulist>
                                <item>
                                    <p>In a <el>sqf:fix</el> element</p>
                                </item>
                                <item>
                                    <p>Inside of any activity element.</p>
                                </item>
                            </ulist>
                        </p>
                    </div4>
                    <div4>
                        <head>Scope</head>
                        <p>There should be no changes to the original scope behavior of the used variable concepts.</p>
                    </div4>
                </div3>
                <div3>
                    <head>Usage</head>
                    <p>Variables should be available in any XPath expressions, which are in the scope of the variable. This shall also apply to the variables which are declared outside of the Schematron QuickFix elements (global variables or variables in <el>sch:rule</el> elements).</p>
                </div3>
            </div2>
            <div2>
                <head>Parameter</head>
                <div3>
                    <head>Definition</head>
                    <p>tbd.</p>
                </div3>
                <div3>
                    <head>Call a QuickFix</head>
                    <p>tbd.</p>
                </div3>
                <div3>
                    <head>Usage</head>
                    <p>tbd.</p>
                </div3>
                <div3>
                    <head>Default value</head>
                    <p>tbd.</p>
                </div3>
                <div3>
                    <head>Abstract parameter</head>
                    <p>tbd.</p>
                </div3>
            </div2>
            <div2>
                <head>User Entry</head>
                <p>A User Entry is a parameter for the QuickFix which can be set by the user during the runtime of the QuickFix execution. </p>
                <p>A QuickFix can have multiple User Entries. A User Entry requires the following properties:</p>
                <ulist>
                    <item>
                        <p>Title: A short description of the functionality of the User Entry</p>
                    </item>
                    <item>
                        <p>Name: To refer the User Entry value inside of the XPath expressions of the QuickFix</p>
                    </item>
                </ulist>
                <p>A User Entry is able to have the following additional properties:</p>
                <ulist>
                    <item>
                        <p>Descriptions: More documentation information.</p>
                    </item>
                    <item>
                        <p>Default value: To suggest this value to the user.</p>
                    </item>
                    <item>
                        <p>Type: To restrict the possible values of the User Entry and get the value in the correct data type </p>
                    </item>
                </ulist>
                <div3>
                    <head>Definition of a User Entry</head>
                    <p>User Entries have to be defined before any change commands in the sqf:fix element:</p>
                    <p><example>
                            <eg xml:space="preserve">&lt;sqf:fix id="fix1">
    &lt;sqf:description>
        &lt;sqf:title>Fix 1&lt;/sqf:title>
    &lt;/sqf:description>
    &lt;sqf:user-entry name="ue1">
        &lt;sqf:description>
            &lt;sqf:title>User Entry 1&lt;/sqf:title>
        &lt;/sqf:description>
    &lt;/sqf:user-entry>
    &lt;sqf:user-entry name="ue2">
        &lt;sqf:description>
            &lt;sqf:title>User Entry 2&lt;/sqf:title>
        &lt;/sqf:description>
    &lt;/sqf:user-entry>
    [Elements from the content model  (sqf:delete | sqf:add | sqf:replace | sqf:stringReplace)+]
&lt;/sqf:fix></eg>
                        </example></p>
                    <p>Each sqf:user-entry element defines a User Entry. Consequently the QuickFix fix1 has two User Entries with the names ue1 and ue2.</p>
                </div3>
                <div3>
                    <head>Value usage</head>
                    <p>To use the value, each User Entry can be used as an XPath variable. So the value of the User Entry can be used in each XPath expression of all Activity Elements in the User Entry. The name of the XPath variable is the name of User Entry.</p>
                    <p><example>
                            <eg>&lt;sqf:user-entry name="ue1"> &lt;sqf:description> &lt;sqf:title>User Entry 1&lt;/sqf:title> &lt;/sqf:description> &lt;/sqf:user-entry> &lt;sqf:replace target="{$ue1}" node-type="element" select="$ue1"/></eg>
                        </example></p>
                    <p>The Activity Element sqf:replace replaces the anchor node (context of the Schematron error) by a new element. The name will be set by the user by setting the User Entry ue1. The content of the new element will be also the value of the User Entry ue1. </p>
                    <div4>
                        <head>Scope</head>
                        <p>The User Entry value is available in all XPath expressions of all Activity Elements of the QuickFix. </p>
                        <p><emph>Exceptions:</emph></p>
                        <p>There could some restrictions of the implementation, which could restrict this (for instance, <titleref href="#anchor_node_restrictions">restrictions to the match attribute</titleref>).</p>
                    </div4>
                </div3>
                <div3>
                    <head>Implementation of User Entries</head>
                    <p>A SQF implementation which supports User Entries should provide the user an interface to set User Entries after or while choosing the QuickFix. For this the titles of each User Entry should displayed in connection with the corresponding QuickFixes.</p>
                </div3>
                <div3>
                    <head>Default value</head>
                    <p>The default attribute sets a default value for the User Entry, using an XPath expression. The result value can be used by the implementation to provide a default value to the user, when he set the User Entry. The default value should used like the default value of a parameter (e.g. sqf:param): </p>
                    <ulist>
                        <item>
                            <p>There are no optional User Entries.</p>
                        </item>
                        <item>
                            <p>Each User Entry should be set by the user.</p>
                        </item>
                        <item>
                            <p>The default value is to provide it as possible value only.</p>
                        </item>
                    </ulist>
                </div3>
            </div2>
            <div2>
                <head>Embedding XPath</head>
                <p>Schematron QuickFix is based on the W3C Recommendation XPath 2.0. Any XPath expression of the Schematron schema needs to match the syntax allowed by the XPath grammar.</p>
                <div3>
                    <head>Attributes to embed XPath expressions</head>
                    <p>The following table shows attributes, whose value will be parsed as XPath expressions, corresponding to the <titleref href="http://www.w3.org/TR/xpath20/">XPath 2.0</titleref> Recommendation:</p>
                    <p>
                        <table border="1" cellspacing="0" cellpadding="2">
                            <thead>
                                <tr>
                                    <th>Attribute</th>
                                    <th>Element</th>
                                    <th>Context</th>
                                    <th>Description</th>
                                    <th>Required return type</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td rowspan="2">default</td>
                                    <td>sqf:param</td>
                                    <td><termref def="sch-error-context">context of the Schematron error</termref></td>
                                    <td>Default value for the parameter</td>
                                    <td>no requirement</td>
                                </tr>
                                <tr>
                                    <td>sqf:user-entry</td>
                                    <td><termref def="sch-error-context">context of the Schematron error</termref></td>
                                    <td>Default value for the User Entry</td>
                                    <td>no requirement</td>
                                </tr>
                                <tr>
                                    <td rowspan="4">match</td>
                                    <td>sqf:add</td>
                                    <td><termref def="sch-error-context">context of the Schematron error</termref></td>
                                    <td>Contexts of the change commands</td>
                                    <td>node()*</td>
                                </tr>
                                <tr>
                                    <td>sqf:delete</td>
                                    <td><termref def="sch-error-context">context of the Schematron error</termref></td>
                                    <td>Contexts of the change commands</td>
                                    <td>node()*</td>
                                </tr>
                                <tr>
                                    <td>sqf:replace</td>
                                    <td><termref def="sch-error-context">context of the Schematron error</termref></td>
                                    <td>Contexts of the change commands</td>
                                    <td>node()*</td>
                                </tr>
                                <tr>
                                    <td>sqf:stringReplace</td>
                                    <td><termref def="sch-error-context">context of the Schematron error</termref></td>
                                    <td>Contexts of the change commands</td>
                                    <td>text()*</td>
                                </tr>
                                <tr>
                                    <td rowspan="5">select</td>
                                    <td>sqf:add</td>
                                    <td><titleref href="#change-command-anchor-node">Anchor node</titleref></td>
                                    <td>Nodes or atomic values, which should be inserted</td>
                                    <td>no requirement</td>
                                </tr>
                                <tr>
                                    <td>sqf:keep</td>
                                    <td>Inherits from the parent node.</td>
                                    <td>Nodes to copy or apply to other change commands</td>
                                    <td>node()*</td>
                                </tr>
                                <tr>
                                    <td>sqf:replace</td>
                                    <td><titleref href="#change-command-anchor-node">Anchor node</titleref></td>
                                    <td>Nodes or atomic values, which should be inserted</td>
                                    <td>no requirement</td>
                                </tr>
                                <tr>
                                    <td>sqf:stringReplace</td>
                                    <td><titleref href="#change-command-anchor-node">Anchor node</titleref></td>
                                    <td>Nodes or atomic values, which should be inserted</td>
                                    <td>no requirement</td>
                                </tr>
                                <tr>
                                    <td>sqf:with-param</td>
                                    <td><termref def="sch-error-context">context of the Schematron error</termref></td>
                                    <td>Value for the parameter</td>
                                    <td>no requirement</td>
                                </tr>
                                <tr>
                                    <td rowspan="6">use-when</td>
                                    <td>sqf:add</td>
                                    <td><titleref href="#change-command-anchor-node">Anchor node</titleref></td>
                                    <td>Condition to process the change command</td>
                                    <td>no requirement, interpreted as boolean</td>
                                </tr>
                                <tr>
                                    <td>sqf:delete</td>
                                    <td><titleref href="#change-command-anchor-node">Anchor node</titleref></td>
                                    <td>Condition to process the change command</td>
                                    <td>no requirement, interpreted as boolean</td>
                                </tr>
                                <tr>
                                    <td>sqf:replace</td>
                                    <td><titleref href="#change-command-anchor-node">Anchor node</titleref></td>
                                    <td>Condition to process the change command</td>
                                    <td>no requirement, interpreted as boolean</td>
                                </tr>
                                <tr>
                                    <td>sqf:stringReplace</td>
                                    <td><titleref href="#change-command-anchor-node">Anchor node</titleref></td>
                                    <td>Condition to process the change command</td>
                                    <td>no requirement, interpreted as boolean</td>
                                </tr>
                                <tr>
                                    <td>sqf:fix</td>
                                    <td><termref def="sch-error-context">context of the Schematron error</termref></td>
                                    <td>Condition to provide the QuickFix</td>
                                    <td>no requirement, interpreted as boolean</td>
                                </tr>
                                <tr>
                                    <td>sqf:group</td>
                                    <td><termref def="sch-error-context">context of the Schematron error</termref></td>
                                    <td>Condition to provide all QuickFixes of this QuickFix group</td>
                                    <td>no requirement, interpreted as boolean</td>
                                </tr>
                            </tbody>
                        </table>
                    </p>
                </div3>
                <div3 id="attribute-value-template">
                    <head>Attribute Value Template</head>
                    <p>The following table shows attributes, whose value is interpreted as <titleref href="http://www.w3.org/TR/xslt20/#attribute-value-templates">attribute value template</titleref> corresponding to the XSLT 2.0 Recommendation:</p>
                    <p>
                        <table border="1" cellspacing="0" cellpadding="2">
                            <thead>
                                <tr>
                                    <th>Attribute</th>
                                    <th>Element</th>
                                    <th>Context</th>
                                    <th>Effective value requirements</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>regex</td>
                                    <td>sqf:stringReplace</td>
                                    <td><titleref href="#change-command-anchor-node">Anchor node</titleref></td>
                                    <td>Valid <titleref href="http://www.w3.org/TR/xslt20/#regular-expressions">Regular Expression</titleref> corresponding to the XSLT 2.0 Recommendation.</td>
                                </tr>
                                <tr>
                                    <td rowspan="2">target</td>
                                    <td>sqf:add</td>
                                    <td><titleref href="#change-command-anchor-node">Anchor node</titleref></td>
                                    <td>xs:QName</td>
                                </tr>
                                <tr>
                                    <td>sqf:replace</td>
                                    <td><titleref href="#change-command-anchor-node">Anchor node</titleref></td>
                                    <td>xs:QName</td>
                                </tr>
                            </tbody>
                        </table>
                    </p>
                    <p>The effective value requirements should be satisfied after interpreting the attribute value template.</p>
                </div3>
            </div2>
            <div2 id="localization">
                <head>Localization</head>
                <p>The SQF localisation concept is based on the <titleref href="http://www.w3.org/TR/xml/#sec-lang-tag">XML concept to detect the natural language</titleref>, using the <att>xml:lang</att> attribute. Consequently SQF elements are able to inherit the language property of all ancestors.</p>
                <div3>
                    <head>Locatable elements</head>
                    <p>The following list shows SQF elements, which are locatable with the attribute <att>xml:lang</att>:</p>
                    <p>
                        <ulist>
                            <item>
                                <p><el>sqf:description</el></p>
                            </item>
                            <item>
                                <p><el>sqf:fix</el></p>
                            </item>
                            <item>
                                <p><el>sqf:fixes</el></p>
                            </item>
                            <item>
                                <p><el>sqf:group</el></p>
                            </item>
                            <item>
                                <p><el>sqf:p</el></p>
                            </item>
                            <item>
                                <p><el>sqf:title</el></p>
                            </item>
                            <item>
                                <p><el>sqf:user-entry</el></p>
                            </item>
                        </ulist>
                    </p>
                </div3>
                <div3>
                    <head>Localisation of a QuickFix</head>
                    <p>To define multiple descriptions for one QuickFix, but in different languages, the <el>sqf:fix</el> element is permitted to contain multiple <el>sqf:description</el> elements. It is restricted, that a <el>sqf:fix</el> element should not contain two <el>sqf:description</el> elements with the same <att>xml:lang</att> attribute value (or both with no <att>xml:lang</att> attribute).</p>
                    <p>In case there are multiple <el>sqf:description</el> elements, the first <el>sqf:description</el> should be the default description. In case the implementation does not support the localisation or there is no language given, it should use this default description.</p>
                </div3>
            </div2>
        </div1>
        <div1>
            <head>Implementation <?oxy_comment_start author="Nico Kutscherauer" timestamp="20150511T141452+0200" comment="move this chapter to appendix?"?>modes<?oxy_comment_end?></head>
            <p>A QuickFix can be implemented in two different modes:<ulist>
                    <item>
                        <p>XML save mode</p>
                    </item>
                    <item>
                        <p>XSLT only mode</p>
                    </item>
                </ulist></p>
            <p>An implementation is free to implement only one or both modes.</p>
            <div2>
                <head>XML save mode</head>
                <p>The XML save mode requires that no changes will be applied to the <termref def="sch-document">source document</termref>, which are not defined by the executed QuickFix. Changes which are caused by an XSLT processor (skip the XML declaration, resolving default attributes, CDATA sections, etc.) any time, should not influence the document. That is why it is not possible to implement the XML save mode with only XSLT processes.</p>
            </div2>
            <div2>
                <head>XSLT only mode</head>
                <p>If an implementation is based only on XSLT processes, this is called the XSLT only mode. In this case, it is allowed to change the <termref def="sch-document">source document</termref> on any QuickFix execution in the following ways, though it is not defined in the QuickFix:<ulist>
                        <item>
                            <p>Skip the XML declaration</p>
                        </item>
                        <item>
                            <p>Skip the DOCTYPE declaration</p>
                        </item>
                        <item>
                            <p>Skip whitespace:<ulist>
                                    <item>
                                        <p>which are outside of the root element and not in processing instructions and comments.</p>
                                    </item>
                                    <item>
                                        <p>non significant whitespace</p>
                                    </item>
                                </ulist></p>
                        </item>
                        <item>
                            <p>Normalize whitespace<ulist>
                                    <item>
                                        <p>Leading whitespace of content in processing instructions in prolog</p>
                                    </item>
                                    <item>
                                        <p>between attributes</p>
                                    </item>
                                </ulist></p>
                        </item>
                        <item>
                            <p>Resolve default attributes to encoded attributes</p>
                        </item>
                        <item>
                            <p>Resolve CDATA sections</p>
                        </item>
                        <item>
                            <p>Resolve Character entities.</p>
                        </item>
                    </ulist></p>
            </div2>
        </div1>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="SQFSpec_Elements.xml">
            <xi:fallback>
                <div1>
                    <head>No reference available</head>
                </div1>
            </xi:fallback>
        </xi:include>
    </body>
    <back>
        <div1>
            <head>Schematron Quick Fixes schema</head>
            <eg><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../schemas/schematron-quickFix.xsd" parse="text"/></eg>
        </div1>
        <div1>
            <head>Examples</head>
            <div2 id="example_apply_fixes">
                <head>QuickFix which applies to itself</head>
                <p>Tbd.</p>
            </div2>
            <div2 id="example_external_doc">
                <head>QuickFixes for external documents</head>
                <p>Tbd.</p>
            </div2>
        </div1>
    </back>
</spec>
